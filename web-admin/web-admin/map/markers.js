import { startIcon, pauseIcon, liveIcon, endIcon } from "./icons.js";
import { devices, getColorFromId, updateDeviceList } from "./devices.js";

export let summaryMarkers = [];

// Debounce timer cho vi·ªác fit map
let fitMapTimer = null;

/**
 * Fit b·∫£n ƒë·ªì ƒë·∫øn c√°c thi·∫øt b·ªã ƒëang active (realtime v√† visible)
 */
function fitMapToActiveDevices(map, immediate = false) {
  const performFit = () => {
    const activeDevices = Object.values(devices).filter(
      d => d.visible && d.status === "realtime" && d.coords.length > 0 && !d.isOffline
    );

    if (activeDevices.length === 0) return;

    // L·∫•y t·ªça ƒë·ªô m·ªõi nh·∫•t c·ªßa t·∫•t c·∫£ thi·∫øt b·ªã active
    const activeCoords = activeDevices.map(device => {
      const lastCoord = device.coords[device.coords.length - 1];
      return [lastCoord.lat, lastCoord.lon];
    });

    if (activeCoords.length === 1) {
      // N·∫øu ch·ªâ c√≥ 1 thi·∫øt b·ªã, center v√† zoom ƒë·∫øn v·ªã tr√≠ ƒë√≥
      map.setView(activeCoords[0], 16);
    } else {
      // N·∫øu c√≥ nhi·ªÅu thi·∫øt b·ªã, fit bounds ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£
      const bounds = L.latLngBounds(activeCoords);
      map.fitBounds(bounds.pad(0.1)); // Th√™m 10% padding
    }
  };

  if (immediate) {
    // Fit ngay l·∫≠p t·ª©c cho thi·∫øt b·ªã m·ªõi
    performFit();
  } else {
    // Clear timer c≈©
    if (fitMapTimer) {
      clearTimeout(fitMapTimer);
    }

    // Debounce 2 gi√¢y ƒë·ªÉ tr√°nh fit li√™n t·ª•c
    fitMapTimer = setTimeout(performFit, 2000);
  }
}

/**
 * Th√™m ƒëi·ªÉm Live (realtime) + trail + tr·∫°ng th√°i
 * map: mapLive truy·ªÅn v√†o
 */
export function addLivePoint(deviceId, lat, lon, timestamp, userName, map) {
  const color = getColorFromId(deviceId);
  const time = new Date(Number(timestamp));

  if (!devices[deviceId]) {
    devices[deviceId] = {
      deviceId,
      userName,
      coords: [],
      trailMarkers: [],
      color,
      visible: true,
      liveMarker: null,
      liveTimer: null,
      lastTimestamp: time,
      status: "realtime", // realtime, pause, offline
      isOffline: false,
    };
  }

  const device = devices[deviceId];
  device.coords.push({ lat, lon, timestamp: time });
  if (device.coords.length > 50) device.coords.shift();

  device.lastTimestamp = time;
  device.status = "realtime";
  device.isOffline = false; // ƒê√°nh d·∫•u l√† online l·∫°i

  // Remove old liveMarker n·∫øu c√≥
  if (device.liveMarker) {
    map.removeLayer(device.liveMarker);
    clearInterval(device.liveTimer);
  }

  const marker = L.marker([lat, lon], { icon: liveIcon }).bindPopup(
    `üì° ${deviceId}<br>${time.toLocaleString("vi-VN")}`
  );

  if (device.visible) marker.addTo(map);
  device.liveMarker = marker;

  // Timer check tr·∫°ng th√°i Realtime / Pause / Offline
  device.liveTimer = setInterval(() => {
    const now = new Date();
    const diffSec = (now - device.lastTimestamp) / 1000;

    let newStatus = "realtime";
    if (diffSec > 180) newStatus = "offline"; // >3 ph√∫t
    else if (diffSec > 60) newStatus = "pause"; // >1 ph√∫t

    if (newStatus !== device.status) {
      device.status = newStatus;

      // X·ª≠ l√Ω icon
      if (device.liveMarker) map.removeLayer(device.liveMarker);

      if (newStatus === "realtime") {
        device.liveMarker = L.marker([lat, lon], { icon: liveIcon }).addTo(map);
      } else if (newStatus === "pause") {
        device.liveMarker = L.marker([lat, lon], { icon: pauseIcon }).addTo(map);
      } else if (newStatus === "offline") {
        // Hi·ªÉn th·ªã endIcon thay v√¨ x√≥a marker
        device.liveMarker = L.marker([lat, lon], { icon: endIcon })
          .bindPopup(`üì¥ ${deviceId} - Offline<br>${device.lastTimestamp.toLocaleString("vi-VN")}`)
          .addTo(map);
        
        // Gi·ªØ l·∫°i trail, kh√¥ng x√≥a
        // ƒê√°nh d·∫•u l√† offline ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã trong sidebar
        device.isOffline = true;
        
        // D·ª´ng timer v√¨ ƒë√£ offline
        clearInterval(device.liveTimer);
        device.liveTimer = null;
        
        // C·∫≠p nh·∫≠t sidebar ƒë·ªÉ x√≥a thi·∫øt b·ªã offline
        updateDeviceList(map);
      }
    }
  }, 5000);

  // Th√™m trail
  const trailMarker = L.circleMarker([lat, lon], { radius: 4, color });
  if (device.visible) trailMarker.addTo(map);
  device.trailMarkers.push(trailMarker);

  // Fit b·∫£n ƒë·ªì ƒë·∫øn thi·∫øt b·ªã realtime n·∫øu ƒëang visible
  if (device.visible && device.status === "realtime") {
    // N·∫øu ƒë√¢y l√† ƒëi·ªÉm ƒë·∫ßu ti√™n c·ªßa thi·∫øt b·ªã, fit ngay l·∫≠p t·ª©c
    const isFirstPoint = device.coords.length === 1;
    fitMapToActiveDevices(map, isFirstPoint);
  }

  updateDeviceList(map);
}

/**
 * Load to√†n b·ªô ƒëi·ªÉm Summary
 */
export function addSummaryPoints(deviceId, coords, map) {
  let device = devices[deviceId] || { coords: [], trailMarkers: [], color: "#3388ff" };

  // X√≥a marker c≈©
  device.trailMarkers.forEach((m) => map.removeLayer(m));
  if (device.liveMarker) {
    map.removeLayer(device.liveMarker);
    clearInterval(device.liveTimer);
  }

  device.coords = coords.map((c) => ({
    lat: c.latitude,
    lon: c.longitude,
    timestamp: new Date(Number(c.timestamp)),
  }));
  device.trailMarkers = [];

  if (device.coords.length === 0) return;

  // Start marker
  const first = device.coords[0];
  const startMarker = L.marker([first.lat, first.lon], { icon: startIcon })
    .addTo(map)
    .bindPopup(`B·∫Øt ƒë·∫ßu<br>${deviceId}<br>${first.timestamp.toLocaleString()}`);
  device.trailMarkers.push(startMarker);

  // Trail
  device.coords.forEach((c) => {
    const m = L.circleMarker([c.lat, c.lon], { radius: 4, color: device.color });
    m.addTo(map);
    device.trailMarkers.push(m);
  });

  // End marker
  const last = device.coords[device.coords.length - 1];
  const endMarker = L.marker([last.lat, last.lon], { icon: endIcon })
    .addTo(map)
    .bindPopup(`K·∫øt th√∫c<br>${deviceId}<br>${last.timestamp.toLocaleString()}`);
  device.trailMarkers.push(endMarker);

  devices[deviceId] = device;

  // Fit map
  const allCoords = device.coords.map((c) => [c.lat, c.lon]);
  map.fitBounds(L.latLngBounds(allCoords).pad(0.2));
}

/**
 * X√≥a t·∫•t c·∫£ marker summary c≈©
 */
export function clearSummaryMarkers(map) {
  // X√≥a t·∫•t c·∫£ markers t·ª´ summaryMarkers array (n·∫øu c√≥)
  summaryMarkers.forEach((m) => m.remove());
  summaryMarkers = [];
  
  // X√≥a t·∫•t c·∫£ trail markers t·ª´ t·∫•t c·∫£ devices
  Object.values(devices).forEach((device) => {
    if (device.trailMarkers && device.trailMarkers.length > 0) {
      device.trailMarkers.forEach((marker) => {
        if (map) {
          map.removeLayer(marker);
        } else {
          marker.remove();
        }
      });
      device.trailMarkers = [];
    }
    
    // X√≥a live marker n·∫øu c√≥ (trong summary mode kh√¥ng c·∫ßn live marker)
    if (device.liveMarker && map) {
      map.removeLayer(device.liveMarker);
      device.liveMarker = null;
    }
    
    // Clear timer n·∫øu c√≥
    if (device.liveTimer) {
      clearInterval(device.liveTimer);
      device.liveTimer = null;
    }
  });
  
  const deviceCount = Object.keys(devices).length;
  console.log(`üßπ Cleared all summary markers from ${deviceCount} devices on map`);
}

/**
 * Export h√†m fit map ƒë·ªÉ s·ª≠ d·ª•ng t·ª´ file kh√°c
 */
export function fitMapToActiveDevicesExternal(map, immediate = false) {
  fitMapToActiveDevices(map, immediate);
}
