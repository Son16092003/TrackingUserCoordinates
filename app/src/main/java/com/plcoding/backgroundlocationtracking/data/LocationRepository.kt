@file:OptIn(kotlinx.serialization.InternalSerializationApi::class)

package com.plcoding.backgroundlocationtracking.data

import android.content.Context
import android.util.Log
import androidx.room.Room
import com.plcoding.backgroundlocationtracking.data.local.AppDatabase
import com.plcoding.backgroundlocationtracking.data.local.PendingLocation
import com.plcoding.backgroundlocationtracking.data.SupabaseClientProvider.client
import io.github.jan.supabase.exceptions.UnauthorizedRestException
import io.github.jan.supabase.postgrest.from
import kotlinx.serialization.Serializable

/**
 * Payload ƒë·ªÉ g·ª≠i l√™n Supabase
 */
@Serializable
data class LocationPayload(
    val latitude: Double,
    val longitude: Double,
    val timestamp: Long
)

class LocationRepository(context: Context) {

    private val db = Room.databaseBuilder(
        context,
        AppDatabase::class.java,
        "location_db"
    ).build()

    private val dao = db.locationDao()

    /**
     * Upload tr·ª±c ti·∫øp, n·∫øu fail th√¨ l∆∞u local ƒë·ªÉ sync sau.
     */
    suspend fun saveOrUploadLocation(latitude: Double, longitude: Double, timestamp: Long) {
        try {
            client.from("locations").insert(
                LocationPayload(latitude, longitude, timestamp)
            )
            Log.d("LocationRepository", "‚úÖ Uploaded location directly: $latitude,$longitude,$timestamp")
        } catch (e: Exception) {
            Log.w("LocationRepository", "‚ö†Ô∏è Upload failed, saving locally", e)
            dao.insertLocation(
                PendingLocation(
                    latitude = latitude,
                    longitude = longitude,
                    timestamp = timestamp
                )
            )
        }
    }

    /**
     * ƒê·ªìng b·ªô d·ªØ li·ªáu pending t·ª´ local DB l√™n Supabase.
     * @return true n·∫øu t·∫•t c·∫£ pending upload th√†nh c√¥ng
     *         false n·∫øu c√≤n b·∫£n ghi ch∆∞a upload ƒë∆∞·ª£c (ƒë·ªÉ Worker retry)
     */
    suspend fun syncPendingLocations(): Boolean {
        val pending = dao.getAllLocations()
        if (pending.isEmpty()) {
            Log.d("LocationRepository", "‚ÑπÔ∏è No pending locations to sync")
            return true
        }

        var hasNetworkError = false
        val uploadedIds = mutableListOf<Int>()

        for (loc in pending) {
            try {
                client.from("locations").insert(
                    LocationPayload(loc.latitude, loc.longitude, loc.timestamp)
                )
                uploadedIds.add(loc.id)
                Log.d("LocationRepository", "‚úÖ Uploaded & removed pending: $loc")
            } catch (e: UnauthorizedRestException) {
                // L·ªói quy·ªÅn => b·ªè lu√¥n, tr√°nh retry v√¥ h·∫°n
                uploadedIds.add(loc.id)
                Log.e("LocationRepository", "üö´ Unauthorized, dropping pending $loc", e)
            } catch (e: Exception) {
                // L·ªói m·∫°ng => gi·ªØ l·∫°i ƒë·ªÉ retry sau
                hasNetworkError = true
                Log.e("LocationRepository", "üåê Network error, keep pending $loc", e)
            }
        }

        if (uploadedIds.isNotEmpty()) {
            dao.deleteLocations(uploadedIds)
        }

        return !hasNetworkError
    }
}
