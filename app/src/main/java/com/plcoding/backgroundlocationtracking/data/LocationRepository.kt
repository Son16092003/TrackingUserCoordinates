@file:OptIn(kotlinx.serialization.InternalSerializationApi::class)

package com.plcoding.backgroundlocationtracking.data

import android.content.Context
import android.provider.Settings
import android.util.Log
import androidx.room.Room
import com.plcoding.backgroundlocationtracking.data.local.AppDatabase
import com.plcoding.backgroundlocationtracking.data.local.PendingLocation
import com.plcoding.backgroundlocationtracking.data.SupabaseClientProvider.client
import io.github.jan.supabase.exceptions.UnauthorizedRestException
import kotlinx.serialization.Serializable
import io.github.jan.supabase.postgrest.from

/**
 * ‚úÖ D·ªØ li·ªáu g·ª≠i l√™n Supabase
 */
@Serializable
data class LocationPayload(
    val latitude: Double,
    val longitude: Double,
    val timestamp: Long,
    val deviceId: String,
    val userName: String
)

/**
 * ‚úÖ Repository x·ª≠ l√Ω to√†n b·ªô logic l∆∞u tr·ªØ & ƒë·ªìng b·ªô v·ªã tr√≠.
 * - N·∫øu c√≥ m·∫°ng: upload tr·ª±c ti·∫øp l√™n Supabase.
 * - N·∫øu m·∫•t m·∫°ng: l∆∞u t·∫°m trong Room DB.
 * - Khi c√≥ m·∫°ng tr·ªü l·∫°i: worker t·ª± ƒë·ªông sync to√†n b·ªô pending.
 */
class LocationRepository(private val context: Context) {

    // ‚úÖ Kh·ªüi t·∫°o Room DB v·ªõi fallback migration
    private val db = Room.databaseBuilder(
        context,
        AppDatabase::class.java,
        "location_db"
    )
        .fallbackToDestructiveMigration()
        .build()

    private val dao = db.locationDao()

    private fun getDeviceId(): String {
        return Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)
            ?: "unknown_device"
    }

    private fun getUserName(): String {
        val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        return prefs.getString("userName", "UnknownUser") ?: "UnknownUser"
    }

    /**
     * ‚úÖ L∆∞u ho·∫∑c upload v·ªã tr√≠ tu·ª≥ v√†o tr·∫°ng th√°i m·∫°ng.
     * - N·∫øu upload th√†nh c√¥ng: xong.
     * - N·∫øu th·∫•t b·∫°i (offline): l∆∞u v√†o Room DB.
     */
    suspend fun saveOrUploadLocation(
        latitude: Double,
        longitude: Double,
        timestamp: Long,
        deviceId: String? = null,
        userName: String? = null
    ) {
        val resolvedDeviceId = deviceId ?: getDeviceId()
        val resolvedUserName = userName ?: getUserName()

        Log.d(
            "LocationRepository",
            "üì§ Upload attempt ‚Üí lat=$latitude, lon=$longitude, time=$timestamp, device=$resolvedDeviceId, user=$resolvedUserName"
        )

        try {
            // üîº Upload tr·ª±c ti·∫øp l√™n Supabase
            client.from("locations").insert(
                LocationPayload(latitude, longitude, timestamp, resolvedDeviceId, resolvedUserName)
            )
            Log.d(
                "LocationRepository",
                "‚úÖ Upload th√†nh c√¥ng ‚Üí lat=$latitude, lon=$longitude, device=$resolvedDeviceId, user=$resolvedUserName"
            )
        } catch (e: Exception) {
            // üåê L·ªói m·∫°ng ‚Üí l∆∞u l·∫°i c·ª•c b·ªô ƒë·ªÉ sync sau
            Log.w(
                "LocationRepository",
                "‚ö†Ô∏è Upload th·∫•t b·∫°i ‚Üí L∆∞u t·∫°m local ƒë·ªÉ retry sau (device=$resolvedDeviceId, user=$resolvedUserName)",
                e
            )
            savePendingLocation(latitude, longitude, timestamp, resolvedDeviceId, resolvedUserName)
        }
    }

    /**
     * ‚úÖ L∆∞u location pending v√†o Room khi upload th·∫•t b·∫°i.
     */
    private suspend fun savePendingLocation(
        latitude: Double,
        longitude: Double,
        timestamp: Long,
        deviceId: String,
        userName: String
    ) {
        try {
            val pending = PendingLocation(
                latitude = latitude,
                longitude = longitude,
                timestamp = timestamp,
                deviceId = deviceId,
                userName = userName
            )
            dao.insertLocation(pending)
            Log.d(
                "LocationRepository",
                "üíæ L∆∞u pending th√†nh c√¥ng ‚Üí lat=$latitude, lon=$longitude, device=$deviceId, user=$userName"
            )
        } catch (e: Exception) {
            Log.e(
                "LocationRepository",
                "‚ùå [ROOM FAILED] Kh√¥ng th·ªÉ l∆∞u pending location ‚Üí lat=$latitude, lon=$longitude, device=$deviceId, user=$userName",
                e
            )
        }
    }

    /**
     * ‚úÖ ƒê·ªìng b·ªô to√†n b·ªô location pending trong Room DB khi c√≥ m·∫°ng.
     * - Upload t·ª´ng b·∫£n ghi.
     * - N·∫øu upload th√†nh c√¥ng ‚Üí xo√° b·∫£n ghi local.
     * - N·∫øu l·ªói m·∫°ng ‚Üí gi·ªØ l·∫°i ƒë·ªÉ retry l·∫ßn sau.
     */
    suspend fun syncPendingLocations(): Boolean {
        val pendingList = dao.getAllLocations()
        if (pendingList.isEmpty()) {
            Log.d("LocationRepository", "‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu pending ƒë·ªÉ sync.")
            return true
        }

        Log.d("LocationRepository", "üîÑ B·∫Øt ƒë·∫ßu sync ${pendingList.size} pending locations...")

        var hasNetworkError = false
        val uploadedIds = mutableListOf<Int>()

        for (loc in pendingList) {
            try {
                client.from("locations").insert(
                    LocationPayload(
                        latitude = loc.latitude,
                        longitude = loc.longitude,
                        timestamp = loc.timestamp,
                        deviceId = loc.deviceId,
                        userName = loc.userName
                    )
                )
                uploadedIds.add(loc.id)
                Log.d("LocationRepository", "‚úÖ Uploaded pending ‚Üí ${loc.id}")
            } catch (e: UnauthorizedRestException) {
                // Token h·∫øt h·∫°n ho·∫∑c quy·ªÅn b·ªã thu h·ªìi ‚Üí xo√° kh·ªèi pending
                uploadedIds.add(loc.id)
                Log.e("LocationRepository", "üö´ Unauthorized, dropped ${loc.id}", e)
            } catch (e: Exception) {
                hasNetworkError = true
                Log.e("LocationRepository", "üåê Network error, gi·ªØ l·∫°i ${loc.id}", e)
            }
        }

        // üóëÔ∏è Xo√° c√°c b·∫£n ghi upload th√†nh c√¥ng
        if (uploadedIds.isNotEmpty()) {
            dao.deleteLocations(uploadedIds)
            Log.d("LocationRepository", "üóëÔ∏è ƒê√£ xo√° ${uploadedIds.size} b·∫£n ghi pending ƒë√£ upload.")
        }

        // ‚úÖ Tr·∫£ v·ªÅ true n·∫øu t·∫•t c·∫£ th√†nh c√¥ng, false n·∫øu c√≥ l·ªói m·∫°ng
        return !hasNetworkError
    }
}
