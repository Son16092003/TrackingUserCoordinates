package com.plcoding.backgroundlocationtracking

import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import com.plcoding.backgroundlocationtracking.admin.PolicyManager

class LocationApp : Application() {

    override fun onCreate() {
        super.onCreate()
        Log.d("LocationApp", "üöÄ App started")

        // 1Ô∏è‚É£ Notification Channel cho LocationService
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                "location",
                "Background Location",
                NotificationManager.IMPORTANCE_MIN
            ).apply {
                setSound(null, null)
                enableVibration(false)
                setShowBadge(false)
            }

            val notificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)

            Log.d("LocationApp", "‚úÖ Silent NotificationChannel created")
        }

        // 2Ô∏è‚É£ Init PolicyManager
        val policyManager = PolicyManager(this)

        // 3Ô∏è‚É£ N·∫øu app l√† Device Owner th√¨ √°p ch√≠nh s√°ch
        if (policyManager.isAdminActive()) {
            try {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    // ‚ö†Ô∏è Ch·ªâ b·∫≠t n·∫øu b·∫°n mu·ªën test ch·∫∑n uninstall th·∫≠t s·ª±
                    policyManager.blockUninstall(true)
                    policyManager.blockLocationPermissionChanges()
                }
                policyManager.enforceLocationPolicy()

                Log.d("LocationApp", "‚úÖ Policies enforced for Device Owner")
            } catch (e: Exception) {
                Log.e("LocationApp", "‚ùå Failed to enforce policies", e)
            }

            // 4Ô∏è‚É£ Ki·ªÉm tra userName
            val prefs = getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
            val savedName = prefs.getString("userName", null)

            if (!savedName.isNullOrEmpty()) {
                // N·∫øu ƒë√£ c√≥ userName ‚Üí start service
                startLocationService(savedName)
            } else {
                // N·∫øu ch∆∞a c√≥ ‚Üí ƒë·ªÉ MainActivity nh·∫≠p
                Log.w("LocationApp", "‚ö†Ô∏è userName ch∆∞a c√≥ ‚Üí ch·ªù MainActivity nh·∫≠p")
            }
        } else {
            Log.w("LocationApp", "‚ö†Ô∏è Device Admin not active ‚Üí policies not applied")
        }
    }

    private fun startLocationService(userName: String) {
        val serviceIntent = Intent(this, LocationService::class.java).apply {
            action = LocationService.ACTION_START
            putExtra("userName", userName)
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(serviceIntent)
        } else {
            startService(serviceIntent)
        }
        Log.d("LocationApp", "‚ñ∂Ô∏è LocationService auto-started with user=$userName")
    }
}
