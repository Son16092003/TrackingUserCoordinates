package com.plcoding.backgroundlocationtracking.worker

import android.content.Context
import android.util.Log
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.plcoding.backgroundlocationtracking.data.LocationRepository
import java.io.IOException

class LocationSyncWorker(
    context: Context,
    workerParams: WorkerParameters
) : CoroutineWorker(context, workerParams) {

    private val repository = LocationRepository(context)

    override suspend fun doWork(): Result {
        Log.d("LocationSyncWorker", "üöÄ Worker started id=$id: syncing pending locations...")

        return try {
            val success = repository.syncPendingLocations()

            if (success) {
                Log.d("LocationSyncWorker", "‚úÖ Worker finished: sync success (id=$id)")
                Result.success()
            } else {
                Log.w("LocationSyncWorker", "‚ö†Ô∏è Some locations not synced (temporary issue), will retry (id=$id)")
                Result.retry()
            }
        } catch (e: IOException) {
            // üëâ L·ªói m·∫°ng (m·∫•t m·∫°ng, timeout) => retry v·ªõi backoff
            Log.e("LocationSyncWorker", "üåê Network error, will retry later (id=$id)", e)
            Result.retry()
        } catch (e: Exception) {
            // üëâ L·ªói kh√°c (th∆∞·ªùng l√† 4xx) => kh√¥ng retry n·ªØa
            Log.e("LocationSyncWorker", "‚ùå Unrecoverable error, will fail (id=$id)", e)
            Result.failure()
        }
    }
}

