package com.plcoding.backgroundlocationtracking.admin

import android.app.admin.DevicePolicyManager
import android.content.ComponentName
import android.content.Context
import android.os.Build
import android.os.UserManager
import android.util.Log
import androidx.annotation.RequiresApi

class PolicyManager(private val context: Context) {
    private val dpm: DevicePolicyManager =
        context.getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager
    private val adminComponent = ComponentName(context, MyDeviceAdminReceiver::class.java)

    /** Ki·ªÉm tra xem app ƒë√£ ƒë∆∞·ª£c set l√†m Device Admin ch∆∞a */
    fun isAdminActive(): Boolean = dpm.isAdminActive(adminComponent)

    /** Kh√≥a m√†n h√¨nh ngay l·∫≠p t·ª©c */
    fun lockDevice() {
        if (isAdminActive()) dpm.lockNow()
    }

    /** X√≥a to√†n b·ªô d·ªØ li·ªáu thi·∫øt b·ªã (factory reset) */
    fun wipeData() {
        if (isAdminActive()) dpm.wipeData(0)
    }

    /** Reset l·∫°i m·∫≠t kh·∫©u thi·∫øt b·ªã */
    fun resetPassword(newPass: String) {
        if (isAdminActive()) dpm.resetPassword(newPass, 0)
    }

    /** Ch·∫∑n ng∆∞·ªùi d√πng g·ª° app MDM (ch·ªâ khi thi·∫øt b·ªã l√† Device Owner) */
    fun blockUninstall(enable: Boolean) {
        if (isAdminActive() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            try {
                dpm.setUninstallBlocked(adminComponent, context.packageName, enable)
                Log.d("PolicyManager", "‚úÖ Block uninstall = $enable for ${context.packageName}")
            } catch (e: Exception) {
                Log.e("PolicyManager", "‚ùå Failed to block uninstall", e)
            }
        } else {
            Log.w("PolicyManager", "‚ö†Ô∏è setUninstallBlocked y√™u c·∫ßu Device Owner + API >= 24")
        }
    }

    /**
     * üö´ Ch·∫∑n user t·∫Øt/revoke permission location
     * (ACCESS_FINE_LOCATION / ACCESS_COARSE_LOCATION)
     */
    @RequiresApi(Build.VERSION_CODES.M)
    fun blockLocationPermissionChanges() {
        if (isAdminActive()) {
            try {
                // 1Ô∏è‚É£ √âp quy·ªÅn location lu√¥n Granted
                dpm.setPermissionGrantState(
                    adminComponent,
                    context.packageName,
                    android.Manifest.permission.ACCESS_FINE_LOCATION,
                    DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED
                )
                dpm.setPermissionGrantState(
                    adminComponent,
                    context.packageName,
                    android.Manifest.permission.ACCESS_COARSE_LOCATION,
                    DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED
                )

                // 2Ô∏è‚É£ T·ª± ƒë·ªông grant c√°c permission trong t∆∞∆°ng lai
                dpm.setPermissionPolicy(
                    adminComponent,
                    DevicePolicyManager.PERMISSION_POLICY_AUTO_GRANT
                )

                Log.d("PolicyManager", "‚úÖ Location permissions locked (cannot be revoked by user)")
            } catch (e: Exception) {
                Log.e("PolicyManager", "‚ùå Failed to lock location permissions", e)
            }
        }
    }

    /**
     * üìç √âp GPS system lu√¥n b·∫≠t (MDM Only)
     * - DISALLOW_CONFIG_LOCATION: c·∫•m user ch·ªânh Location trong Settings
     * - setLocationEnabled(): API 30+ m·ªõi h·ªó tr·ª£ b·∫≠t GPS
     */
    fun enforceLocationPolicy() {
        if (!isAdminActive()) return

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                // C·∫•m user v√†o Settings ƒë·ªÉ t·∫Øt Location
                dpm.addUserRestriction(adminComponent, UserManager.DISALLOW_CONFIG_LOCATION)
                Log.d("PolicyManager", "‚úÖ User cannot change Location settings")
            }

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // API 30+ c√≥ th·ªÉ √©p GPS lu√¥n b·∫≠t
                dpm.setLocationEnabled(adminComponent, true)
                Log.d("PolicyManager", "‚úÖ GPS forced ON (API 30+)")
            }
        } catch (e: Exception) {
            Log.e("PolicyManager", "‚ùå Failed to enforce GPS policy", e)
        }
    }
}
